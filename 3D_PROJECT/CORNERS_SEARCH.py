#!/usr/bin/env python3
def map(L):
	mn_x = float('inf')
	mx_x = -float('inf')
	
	mn_y = float('inf')
	mx_y = -float('inf')
	
	mn_z = float('inf')
	mx_z = -float('inf')
	for x , y, z, x2, y2, z2 in L :   ### <<<<<<<<<<<<<<<<<<	
	
		mn_x = min(mn_x, x)
		mx_x = max(mx_x, x2)
		
		mn_y = min(mn_y, y)
		mx_y = max(mx_y, y2)
		
		mn_z = min(mn_z, z)
		mx_z = max(mx_z, z2)
		
	X1_Y1_Z1 = [mn_x, mn_y, mn_z]
	X2_Y2_Z2 = [mx_x, mx_y, mx_z]
	
	#print(tlf, brb)
	al = ["x","y","z"]
	
	q = []
	
	
	qqq = []
	m = {}
	c = 0
	X_ULT = []
	Y_ULT = []
	Z_ULT = []
	
	xx = []
	yy = []
	zz = []
	
	
	xx_ = []
	yy_ = []
	zz_ = []
	
	ccc = []
	
	x_y_z_s_2 = ['-','-','-']
	x_y_z_s_1 = ['+','+','+']
	
	corn = []
	
	EDGES = [ (X2_Y2_Z2[0] , X2_Y2_Z2[1], X2_Y2_Z2[2] ,("X2 Y2 Z2"),['-','-','-'])    ]
	
	for i in range(3):
		ct = []
		#q.append(brb)
		#print(brb[0:i] ,  tlf[i], brb[i+1:])
		
		tem = X2_Y2_Z2[0:i] +  [X1_Y1_Z1[i]] + X2_Y2_Z2[i+1:]
		
		ts = x_y_z_s_2[0:i] +  [x_y_z_s_1[i]] + x_y_z_s_2[i+1:]
		#print(tem, "prev   ", al[i])
		#q.append(brb)
			#q.append(tem)
			#c += 1 
		
		X, Y, Z =  X2_Y2_Z2
		ct.append((X , Y, Z ,("X2 Y2 Z2"),['-','-','-']))
		
		if [X , Y, Z] not in corn : corn.append([X , Y, Z])
		
		X__ , Y__, Z__ = 'X2 ' , 'Y2 ' , 'Z2'
	#   x     y    z
		#x_s , y_s , z_s = '-','-','-'
		
		xi , yi, zi = tem
		
		x_s , y_s , z_s = ts
		
		if xi == X1_Y1_Z1[0] and yi == X2_Y2_Z2[1] and zi == X2_Y2_Z2[2] :
				#
			X__ = 'X1 '
		if xi == X2_Y2_Z2[0] and yi == X1_Y1_Z1[1] and zi == X2_Y2_Z2[2] :
										#
			Y__ = 'Y1 '
		if xi == X2_Y2_Z2[0] and yi == X2_Y2_Z2[1] and zi == X1_Y1_Z1[2]:
																#
			Z__ = 'Z1'
			
		ct.append((xi, yi, zi  , (X__+Y__+Z__),[x_s , y_s , z_s]))
		
		if [xi, yi, zi] not in corn : corn.append([xi, yi, zi])
		
		if (xi, yi, zi  , (X__+Y__+Z__)) not  in EDGES :
			EDGES.append(   (xi, yi, zi  , (X__+Y__+Z__),[x_s , y_s , z_s]) )
			
		xx = []
		yy = []
		zz = []
		if i not in m :
			m[i] = [X2_Y2_Z2]
		m[i].append(tem)	
		
		#cc = 0
		for j in range(3):
			if j == i : continue
			if j != i :
				
				temp = tem[0:j] +  [X1_Y1_Z1[j]] + tem[j+1:]
				
				tss = ts[0:j] +  [x_y_z_s_1[j]] + ts[j+1:]
				
				xii , yii, zii = temp
				X_1 , Y_1, Z_1 = 'X2 ' , 'Y2 ' , 'Z2'
			#  x     y     z
				
				#X_s, Y_s , Z_s = '- ' , '- ' , '-'
				
				
				
				if [xii, yii, zii] not in corn : corn.append([xii, yii, zii ])
				
				X_s, Y_s , Z_s = tss
				
				if xii == X1_Y1_Z1[0] and yii == X1_Y1_Z1[1] and zii == X2_Y2_Z2[2] :
							#                       #
					X_1 = 'X1 '
					Y_1 = 'Y1 '
					
					X_s = '+'
					Y_s = '+'
				if xii == X1_Y1_Z1[0] and yii == X2_Y2_Z2[1] and zii == X1_Y1_Z1[2] :
							#                                             #
					X_1 = 'X1 '
					Z_1 = 'Z1'
					
					X_s = '+'
					Z_s = '+'
				if xii == X2_Y2_Z2[0] and yii == X1_Y1_Z1[1] and zii == X1_Y1_Z1[2] :
													#					     #
					Y_1 = 'Y1 ' 
					Z_1 = 'Z1'
					
					Y_s = '+'
					Z_s = '+'
					
					
					
				ct.append((xii , yii, zii,(X_1+Y_1+Z_1),[X_s , Y_s , Z_s]))
				
				if [xii, yii, zii] not in corn : corn.append([xii, yii, zii ])
				
				
				if (xii , yii, zii,(X_1+Y_1+Z_1),[X_s , Y_s , Z_s]) not  in EDGES :
					EDGES.append(  (xii , yii, zii,(X_1+Y_1+Z_1),[X_s , Y_s , Z_s])  )
					
					
					
				X_e, Y_e, Z_e = X1_Y1_Z1 
				
				
				
				
				ct.append((X_e, Y_e, Z_e, ("X1 Y1 Z1"),  ['+','+','+']))
				if [ X_e, Y_e, Z_e] not in corn :corn.append([X_e, Y_e, Z_e ])
				ccc.append(ct)
				#print(ct)
				ct.pop()
				ct.pop()
				
				
				
				m[i].append(temp)
				m[i].append(X1_Y1_Z1)
				#print(m[i], "THIS", len(m[i]))
				#q.append(m[i].copy())
				xx = []
				yy = []
				zz = []
				for x, y, z in  m[i].copy()  :
													#
					X_ULT.append(x)
					Y_ULT.append(y)
					Z_ULT.append(z)
					
					
					
				m[i].pop()
				m[i].pop()
				
				
	EDGES.append(  (X1_Y1_Z1[0] , X1_Y1_Z1[1], X1_Y1_Z1[2] ,("X1 Y1 Z1"), ['+','+','+'])    )	
	
	if [X1_Y1_Z1[0] , X1_Y1_Z1[1], X1_Y1_Z1[2]] not in corn : corn.append([X1_Y1_Z1[0] , X1_Y1_Z1[1], X1_Y1_Z1[2]])
	
	
	
				
	#print( X_ULT[0:4], Y_ULT[0:4] , Z_ULT[0:4] )# 1
	#print()
	#print( X_ULT[4:8], Y_ULT[4:8] , Z_ULT[4:8] )# 2
	#print()
	#print( X_ULT[8:12], Y_ULT[8:12] , Z_ULT[8:12] )# 3
	#print()
	#print( X_ULT[12:16], Y_ULT[12:16] , Z_ULT[12:16] )# 4
	#print()
	#print( X_ULT[16:20], Y_ULT[16:20] , Z_ULT[16:20] )# 5
	#print()
	#print( X_ULT[20:24], Y_ULT[20:24] , Z_ULT[20:24] )# 6
	#print()
	
	
	#print(X_ULT)
	#print()
	#print(Y_ULT)
	#print()
	#print(Z_ULT)
	#print()
	
	
	
	
	_1  = X_ULT[0:4], Y_ULT[0:4] , Z_ULT[0:4] 
	
	_2  = X_ULT[4:8], Y_ULT[4:8] , Z_ULT[4:8] 
	
	_3  = X_ULT[8:12], Y_ULT[8:12] , Z_ULT[8:12] 
	
	_4  = X_ULT[12:16], Y_ULT[12:16] , Z_ULT[12:16] 
	
	_5  = X_ULT[16:20], Y_ULT[16:20] , Z_ULT[16:20] 
	
	_6  = X_ULT[20:24], Y_ULT[20:24] , Z_ULT[20:24] 
	
	
	't l f '    'b r ba '   
	
	't l ba '   'b r f '
	
	't r f '   'b l ba '
	
	't r ba '   'b l f '
	
	
	return EDGES 
################################################################################################################################################################
def shortestPath( L  ) :
	A = map(L)

	ANS = []
	def bfs(PATH, directions , L):
		
		import collections 
		q = collections.deque([])
		
		q.append(PATH)
		#print(q,directions)
		seen = set()
		road = []
		while q:
			x, y, z = q.popleft()
			
			if [x,y,z] not in road : road.append([x,y,z])
			cou = 0
			for x1 , y1, z1,  x2 , y2, z2 in L : 
				if x1 <= x <= x2 and y1 <= y <= y2 and z1 <= z <= z2 :
				# If it's a blocker but we still have k left, we'll go there and k -= 1.
					cou += 1
					if cou == 2 :
						if [x,y,z] not in ANS : ANS.append([x,y,z])
						if [x,y,z] not in road : road.append([x,y,z])
						cou = 0
						#print(road)
						#print('^^^^^^^^^^^^')
						return  [x,y,z]
					
					
			
			else:
				for xx, yy, zz in directions:
					nx = x + xx
					ny = y + yy
					nz = z + zz
					
					#for x1 , y1, z1,  x2 , y2, z2 in L : 
						#if x1 <= nx <= x2 and y1 <= ny <= y2 and z1 <= nz <= z2 and (nx, ny, nz) not in seen:
						# If it's a blocker but we still have k left, we'll go there and k -= 1.
					if (nx, ny, nz) not in seen:
						seen.add((nx, ny, nz))
						q.append((nx, ny, nz))
						# Otherwise continue on  if it's a 0 - free location.
						#elif grid[nr][nc] == 0:
								#seen.add((nx, ny, nz))
								#q.append((nr, nc, steps + 1, rk))
		# If we don't hit the end in our traversal we know it's not possible.
	                  #			                                          
	ALL_DIR = [   [[+1, +1, +1] ,[0, +1, +1] ,[+1, 0, +1] ,[+1, +1, 0] ,[0, 0, +1] ,[0, +1, 0] ,[+1, 0, 0] ] , [[-1, -1, -1] ,[0, -1, -1] ,[-1, 0, -1] ,[-1, -1, 0] ,[0, 0, -1] ,[0, -1, 0] ,[-1, 0, 0] ] ,[[-1, -1, +1] ,[0, -1, +1] ,[-1, 0, +1] ,[-1, -1, 0] ,[0, 0, +1] ,[0, -1, 0] ,[-1, 0, 0] ] ,[[+1, +1, -1] ,[0, +1, -1] ,[+1, 0, -1] ,[+1, +1, 0] ,[0, 0, -1] ,[0, +1, 0] ,[+1, 0, 0] ] ,[[-1, +1, +1] ,[0, +1, +1] ,[-1, 0, +1] ,[-1, +1, 0] ,[0, 0, +1] ,[0, +1, 0] ,[-1, 0, 0] ] ,[[+1, -1, -1] ,[0, -1, -1] ,[+1, 0, -1] ,[+1, -1, 0] ,[0, 0, -1] ,[0, -1, 0] ,[+1, 0, 0] ],  [[-1, +1, -1] ,[0, +1, -1] ,[-1, 0, -1] ,[-1, +1, 0] ,[0, 0, -1] ,[0, +1, 0] ,[-1, 0, 0] ],[[+1, -1, +1] ,[0, -1, +1] ,[+1, 0, +1] ,[+1, -1, 0] ,[0, 0, +1] ,[0, -1, 0] ,[+1, 0, 0]  ]    ]
	
	ALL_DIR2 = [[[-1, -1, 1], [-1, 0, 1], [-1, 1, -1], [-1, 1, 0], [-1, 1, 1], [0, -1, 1], [0, 0, 1], [0, 1, -1], [0, 1, 0], [0, 1, 1], [1, -1, -1], [1, -1, 0], [1, -1, 1], [1, 0, -1], [1, 0, 0], [1, 0, 1], [1, 1, -1], [1, 1, 0], [1, 1, 1]], [[-1, -1, -1], [-1, -1, 0], [-1, -1, 1], [-1, 0, -1], [-1, 0, 0], [-1, 0, 1], [-1, 1, -1], [-1, 1, 0], [-1, 1, 1], [0, -1, -1], [0, -1, 0], [0, -1, 1], [0, 0, -1], [0, 1, -1], [1, -1, -1], [1, -1, 0], [1, -1, 1], [1, 0, -1], [1, 1, -1]], [[-1, -1, -1], [-1, -1, 0], [-1, -1, 1], [-1, 0, -1], [-1, 0, 0], [-1, 0, 1], [-1, 1, -1], [-1, 1, 0], [-1, 1, 1], [0, -1, -1], [0, -1, 0], [0, -1, 1], [0, 0, 1], [0, 1, 1], [1, -1, -1], [1, -1, 0], [1, -1, 1], [1, 0, 1], [1, 1, 1]], [[-1, -1, -1], [-1, 0, -1], [-1, 1, -1], [-1, 1, 0], [-1, 1, 1], [0, -1, -1], [0, 0, -1], [0, 1, -1], [0, 1, 0], [0, 1, 1], [1, -1, -1], [1, -1, 0], [1, -1, 1], [1, 0, -1], [1, 0, 0], [1, 0, 1], [1, 1, -1], [1, 1, 0], [1, 1, 1]], [[-1, -1, -1], [-1, -1, 0], [-1, -1, 1], [-1, 0, -1], [-1, 0, 0], [-1, 0, 1], [-1, 1, -1], [-1, 1, 0], [-1, 1, 1], [0, -1, 1], [0, 0, 1], [0, 1, -1], [0, 1, 0], [0, 1, 1], [1, -1, 1], [1, 0, 1], [1, 1, -1], [1, 1, 0], [1, 1, 1]], [[-1, -1, -1], [-1, -1, 0], [-1, -1, 1], [-1, 0, -1], [-1, 1, -1], [0, -1, -1], [0, -1, 0], [0, -1, 1], [0, 0, -1], [0, 1, -1], [1, -1, -1], [1, -1, 0], [1, -1, 1], [1, 0, -1], [1, 0, 0], [1, 0, 1], [1, 1, -1], [1, 1, 0], [1, 1, 1]], [[-1, -1, -1], [-1, -1, 0], [-1, -1, 1], [-1, 0, -1], [-1, 0, 0], [-1, 0, 1], [-1, 1, -1], [-1, 1, 0], [-1, 1, 1], [0, -1, -1], [0, 0, -1], [0, 1, -1], [0, 1, 0], [0, 1, 1], [1, -1, -1], [1, 0, -1], [1, 1, -1], [1, 1, 0], [1, 1, 1]], [[-1, -1, -1], [-1, -1, 0], [-1, -1, 1], [-1, 0, 1], [-1, 1, 1], [0, -1, -1], [0, -1, 0], [0, -1, 1], [0, 0, 1], [0, 1, 1], [1, -1, -1], [1, -1, 0], [1, -1, 1], [1, 0, -1], [1, 0, 0], [1, 0, 1], [1, 1, -1], [1, 1, 0], [1, 1, 1]]]
	
	#PAIRS = [    [A[-1][:3]  , A[0][:3]  ] ,    [A[-2][:3]  , A[2][:3]  ] ,  [A[-3][:3]  , A[1][:3]  ] ,    [A[-4][:3]  , A[3][:3]  ] ]
	#print(PAIRS,'UP')
	
	PAIRS = [    A[-1][:3]  , A[0][:3]   ,    A[-2][:3]  , A[2][:3]   ,  A[-3][:3]  , A[1][:3]   ,    A[-4][:3]  , A[3][:3]   ]
	#print(PAIRS,'UP', len(ALL_DIR), len(ALL_DIR) * len(ALL_DIR[0]) ,(len(ALL_DIR) * len(ALL_DIR[0]) )// len(ALL_DIR) )
	
	#[    [A[-1][:3]  , A[0][:3]  ] ,    [A[-2][:3]  , A[2][:3]  ] ,  [A[-3][:3]  , A[1][:3]  ] ,    [A[-4][:3]  , A[3][:3]  ] ]
	
	X1 , Y1 , Z1 = A[-1][:3] # MIN
	X2 , Y2 , Z2 = A[0][:3]  # MAX
	
	#return 
	
	ind = 0
	q = []
	for PATH in PAIRS :
		directions = ALL_DIR[ind]
		g =  bfs(PATH, directions , L ) 
		if g not in q : 
			q.append(g )
		
		
		ind+=1
	print(ANS)
	#print(q)
		
		
	
		

#print(X1 , Y1 , Z1)
#print(X2 , Y2 , Z2)
print()
#recur(A)

L = [[2,2,2,  3,3,3],   #  23
	[1,1,1,  3,3,3],   # 123
	[2,2,2,  4,4,4],   #  234
	[1,1,1,  4,4,4],   # 1234 <<<<<<<<<
	[0,0,0,  4,4,4],   #01234
	[1,1,1,  5,5,5],   # 12345
]









print(  shortestPath( L ))
print()
print()



L = [
[0,0,0,  9,9,9],   ###########
	
[2,2,2,  5,5,5],   #  2345
[1,1,1,  4,4,4],   # 1234
[2,2,2,  4,4,4],   #  234
[1,1,1,  5,5,5],   # 12345 <<<<<<<<<
[0,0,0,  5,5,5],   #012345
[1,1,1,  6,6,6],   # 123456
]

print( shortestPath( L )   )
print()

LL = [
#[0,0,0,  9,9,9],   ###########
	
[2,2,2,  3,3,3],   #  23
[1,1,1,  3,3,3],   # 123
[2,2,2,  4,4,4],   #  234
[1,1,1,  4,4,4],   # 1234 <<<<<<<<<
[0,0,0,  4,4,4],   #01234
[1,1,1,  5,5,5],   # 12345
]

print( shortestPath( LL )   )
print()

LLL = [
	[1,1,1,  2,2,2],   #  12 <<<<<
	[0,0,0,  2,2,2],   # 012
	[1,1,1,  3,3,3],   #  123
]

print( shortestPath( LLL )   )
print()


LLLL = [
	[1,1,1,  2,2,2],   #  12 <<<<<
	[0,0,0,  2,2,2],   # 012
	[1,1,1,  3,3,3],   #  123
	[7,7,7,  9,9,9],   #  ......789
]

print( shortestPath( LLLL )   )
print()

LLLLL = [
	[1,1,1,  2,2,2],   #  12 <<<<<
	[0,0,0,  2,2,2],   # 012
	[1,1,1,  3,3,3],   #  123
	[7,7,7,  9,9,9],   #  ......789
	[6,6,6,  8,8,8],   #       678      DISJOINT CUBES WRORNG ANSWER !!!  USE UNION FIND ALGORITHM
]

print( shortestPath( LLLLL )   )
print()


F = [[8,8,8,   10, 10, 10],  [6,6,6,   9, 9, 9] ,
[1, 7, 7,   4,10,10], [0, 5, 5,   3,9,9],
[0, 0, 6, 3, 3, 10], [1, 1, 5, 2, 4, 7],
[0, 0, 0, 3,2,3],  [2, 1, 2, 4,3,4],
[0, 7, 0, 3, 10, 3], [2, 5, 2, 3, 8, 5], 
[7, 0, 7, 8, 3, 10] , [5, 2, 7, 7, 5, 9] ,
[7, 0, 0 , 10, 3, 3] ,[5, 2, 2 , 9, 5, 5] ,
[8, 8, 0 , 10, 10, 3] , [7, 7, 2 , 9, 10, 4] ] 


print( shortestPath( F )   )
print()


#[0, 0, 0, 6, 6, 6]

#[1, 1, 1, 4, 4, 4]

#[1, 1, 1, 2, 2, 2]

#[1, 1, 1, 2, 2, 2]

#[1, 1, 1, 8, 8, 8]

#([[1, 1, 1, 2, 2, 2], [7, 7, 7, 8, 8, 8]], 2, [1, 1, 1, 8, 8, 8])

#([[2, 1, 2, 3, 2, 3], [1, 1, 6, 2, 2, 7], [1, 2, 6, 2, 3, 7], [2, 7, 2, 3, 8, 3], [1, 7, 7, 2, 8, 8], [2, 7, 7, 3, 8, 8], [7, 2, 2, 8, 3, 3], [8, 8, 8, 9, 9, 9]], 8, [1, 1, 2, 9, 9, 9])



		

"""
temp = 0
vn = 0
for vv in v : # [['+1', '+1', '+1'], ['-1', '-1', '-1']]
	vnn = 0
	for vvv in vv : # ['+1', '+1', '+1']
		temp = vvv.copy()
		print(vvv)
		vvv[0] = 0
		print(vvv)
		vvv = temp.copy()
		vvv[1] = 0
		print(vvv)
		vvv = temp.copy()
		vvv[2] = 0
		print(vvv)
		vvv = temp.copy()
		
		vvv[0] = 0
		vvv[1] = 0
		print(vvv)
		vvv = temp.copy()
		
		vvv[0] = 0
		vvv[2] = 0
		print(vvv)
		vvv = temp.copy()
		
		vvv[1] = 0
		vvv[2] = 0
		print(vvv)
		vvv = temp.copy()
		
		print()



v = [ [-1, -1, -1] ,  [+1, -1, -1], [+1, +1, -1], [+1, -1, +1], [-1, +1, -1], [-1, +1, +1] ,[-1, -1, +1], [+1, +1, +1]] 

v = [[['+1', '+1', '+1'], ['-1', '-1', '-1']], [['-1', '-1', '+1'], ['+1', '+1', '-1']], [['-1', '+1', '+1'], ['+1', '-1', '-1']], [['-1', '+1', '-1'], ['+1', '-1', '+1']]]



#A = [(5, 5, 5, 'X2 Y2 Z2', ['-', '-', '-']), (0, 5, 5, 'X1 Y2 Z2', ['+', '-', '-']), (0, 0, 5, 'X1 Y1 Z2', ['+', '+', '-']), (0, 5, 0, 'X1 Y2 Z1', ['+', '-', '+']), (5, 0, 5, 'X2 Y1 Z2', ['-', '+', '-']), (5, 0, 0, 'X2 Y1 Z1', ['-', '+', '+']), (5, 5, 0, 'X2 Y2 Z1', ['-', '-', '+']), (0, 0, 0, 'X1 Y1 Z1', ['+', '+', '+'])] 

	
ALL_DIR = [   [[+1, +1, +1] ,[0, +1, +1] ,[+1, 0, +1] ,[+1, +1, 0] ,[0, 0, +1] ,[0, +1, 0] ,[+1, 0, 0] ] , [[-1, -1, -1] ,[0, -1, -1] ,[-1, 0, -1] ,[-1, -1, 0] ,[0, 0, -1] ,[0, -1, 0] ,[-1, 0, 0] ] ,[[-1, -1, +1] ,[0, -1, +1] ,[-1, 0, +1] ,[-1, -1, 0] ,[0, 0, +1] ,[0, -1, 0] ,[-1, 0, 0] ] ,[[+1, +1, -1] ,[0, +1, -1] ,[+1, 0, -1] ,[+1, +1, 0] ,[0, 0, -1] ,[0, +1, 0] ,[+1, 0, 0] ] ,[[-1, +1, +1] ,[0, +1, +1] ,[-1, 0, +1] ,[-1, +1, 0] ,[0, 0, +1] ,[0, +1, 0] ,[-1, 0, 0] ] ,[[+1, -1, -1] ,[0, -1, -1] ,[+1, 0, -1] ,[+1, -1, 0] ,[0, 0, -1] ,[0, -1, 0] ,[+1, 0, 0] ],  [[-1, +1, -1] ,[0, +1, -1] ,[-1, 0, -1] ,[-1, +1, 0] ,[0, 0, -1] ,[0, +1, 0] ,[-1, 0, 0] ],[[+1, -1, +1] ,[0, -1, +1] ,[+1, 0, +1] ,[+1, -1, 0] ,[0, 0, +1] ,[0, -1, 0] ,[+1, 0, 0]  ]    ]
		




##########################################################################################################################################################################################################################################################################################################################
ALL_DIR = [   [+1, +1, +1] ,[0, +1, +1] ,[+1, 0, +1] ,[+1, +1, 0] ,[0, 0, +1] ,[0, +1, 0] ,[+1, 0, 0]  , [-1, -1, -1] ,[0, -1, -1] ,[-1, 0, -1] ,[-1, -1, 0] ,[0, 0, -1] ,[0, -1, 0] ,[-1, 0, 0]  ,[-1, -1, +1] ,[0, -1, +1] ,[-1, 0, +1] ,[-1, -1, 0] ,[0, 0, +1] ,[0, -1, 0] ,[-1, 0, 0]  ,[+1, +1, -1] ,[0, +1, -1] ,[+1, 0, -1] ,[+1, +1, 0] ,[0, 0, -1] ,[0, +1, 0] ,[+1, 0, 0]  ,[-1, +1, +1] ,[0, +1, +1] ,[-1, 0, +1] ,[-1, +1, 0] ,[0, 0, +1] ,[0, +1, 0] ,[-1, 0, 0]  ,[+1, -1, -1] ,[0, -1, -1] ,[+1, 0, -1] ,[+1, -1, 0] ,[0, 0, -1] ,[0, -1, 0] ,[+1, 0, 0] ,  [-1, +1, -1] ,[0, +1, -1] ,[-1, 0, -1] ,[-1, +1, 0] ,[0, 0, -1] ,[0, +1, 0] ,[-1, 0, 0] ,[+1, -1, +1] ,[0, -1, +1] ,[+1, 0, +1] ,[+1, -1, 0] ,[0, 0, +1] ,[0, -1, 0] ,[+1, 0, 0]      ]


print(len(ALL_DIR))


to_x1 = []
to_x2 = []

to_y1 = []
to_y2 = []

to_z1 = []
to_z2 = []


for i in ALL_DIR:
	if i[0] == +1 :
		if i not in to_x2 : to_x2.append(i) 
	if i[0] == -1 :
		if i not in to_x1 : to_x1.append(i) 
		
	if i[1] == +1 :
		if i not in to_y2 :to_y2.append(i) 
	if i[1] == -1 :
		if i not in to_y1 :to_y1.append(i) 
		
	if i[2] == +1 :
		if i not in to_z2 :to_z2.append(i) 
	if i[2] == -1 :
		if i not in to_z1 :to_z1.append(i) 
		
print(to_x1) 
print(to_x2)
print()
print(to_y1) 
print(to_y2)
print()
print(to_z1) 
print(to_z2)
print()









######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
















#!/usr/bin/env python3

ALL_DIR = [   [+1, +1, +1] ,[0, +1, +1] ,[+1, 0, +1] ,[+1, +1, 0] ,[0, 0, +1] ,[0, +1, 0] ,[+1, 0, 0]  , [-1, -1, -1] ,[0, -1, -1] ,[-1, 0, -1] ,[-1, -1, 0] ,[0, 0, -1] ,[0, -1, 0] ,[-1, 0, 0]  ,[-1, -1, +1] ,[0, -1, +1] ,[-1, 0, +1] ,[-1, -1, 0] ,[0, 0, +1] ,[0, -1, 0] ,[-1, 0, 0]  ,[+1, +1, -1] ,[0, +1, -1] ,[+1, 0, -1] ,[+1, +1, 0] ,[0, 0, -1] ,[0, +1, 0] ,[+1, 0, 0]  ,[-1, +1, +1] ,[0, +1, +1] ,[-1, 0, +1] ,[-1, +1, 0] ,[0, 0, +1] ,[0, +1, 0] ,[-1, 0, 0]  ,[+1, -1, -1] ,[0, -1, -1] ,[+1, 0, -1] ,[+1, -1, 0] ,[0, 0, -1] ,[0, -1, 0] ,[+1, 0, 0] ,  [-1, +1, -1] ,[0, +1, -1] ,[-1, 0, -1] ,[-1, +1, 0] ,[0, 0, -1] ,[0, +1, 0] ,[-1, 0, 0] ,[+1, -1, +1] ,[0, -1, +1] ,[+1, 0, +1] ,[+1, -1, 0] ,[0, 0, +1] ,[0, -1, 0] ,[+1, 0, 0]      ]


print(len(ALL_DIR))


to_x1 = []
to_x2 = []

to_y1 = []
to_y2 = []

to_z1 = []
to_z2 = []

al = []
for i in ALL_DIR:
	if i[0] == +1 :
		if i not in to_x2 : to_x2.append(i) 
	if i[0] == -1 :
		if i not in to_x1 : to_x1.append(i) 
		
	if i[1] == +1 :
		if i not in to_y2 :to_y2.append(i) 
	if i[1] == -1 :
		if i not in to_y1 :to_y1.append(i) 
		
	if i[2] == +1 :
		if i not in to_z2 :to_z2.append(i) 
	if i[2] == -1 :
		if i not in to_z1 :to_z1.append(i) 
	
	if i not in al : al.append(i) 	
print(to_x1) 
print(to_x2)
print()
print(to_y1) 
print(to_y2)
print()
print(to_z1) 
print(to_z2)
print()



print(al , len(al))



def product(*iterables, repeat=1):
	
	pools = [tuple(pool) for pool in iterables] * repeat
	#print(pools	,'here')
	
	
	q = []
	result = [[]]
	cn= 0
	for pool in pools:
		
		q = []
		for x in result :
			if  len( x ) == (repeat * len(iterables)  ) : break
			
			for y in pool :
				
				cn += 1
				#if  len( x+[y] ) == (repeat * len(iterables)  )  : print(x+[y] , cn) # 365     876
				if  len(  x+[y]  ) == (repeat * len(iterables)  ) : pass#print(x+[y] )
				q.append( x+[y]   )
				
		result = q
		
		
		
	return result  # or q 

print()#           x        y           z
a = list(product([-1,0,+1],[-1,0,+1],[-1,0,+1]))  #  [0, 0, 0] + 1 GO NO WHERE
print(a,len(a),'<<<<')
#  

v = [  [[-1, -1, -1],[1, 1, 1]],      [[-1, -1, 1],[1, 1, -1]],       [[-1, 1, 1],[1, -1, -1]],         [[-1, 1, -1],[1, -1, 1]]    ]
temp = 0
vn = 0
ns = []   
for vv in v : # [['+1', '+1', '+1'], ['-1', '-1', '-1']]
	vnn = 0
	for vvv in vv : # ['+1', '+1', '+1']
		temp = vvv.copy()
		if vvv not in ns : ns.append(vvv.copy())
		print(vvv)
		vvv[0] = 0
		if vvv not in ns : ns.append(vvv.copy())
		print(vvv)
		vvv = temp.copy()
		vvv[1] = 0
		if vvv not in ns : ns.append(vvv.copy())
		print(vvv)
		vvv = temp.copy()
		vvv[2] = 0
		if vvv not in ns : ns.append(vvv.copy())
		print(vvv)
		vvv = temp.copy()
		
		vvv[0] = 0
		vvv[1] = 0
		if vvv not in ns : ns.append(vvv.copy())
		print(vvv)
		vvv = temp.copy()
		
		vvv[0] = 0
		vvv[2] = 0
		if vvv not in ns : ns.append(vvv.copy())
		print(vvv)
		vvv = temp.copy()
		
		vvv[1] = 0
		vvv[2] = 0
		if vvv not in ns : ns.append(vvv.copy())
		print(vvv)
		vvv = temp.copy()
		if vvv not in ns : ns.append(vvv.copy())
		
		print()
		
		
		
print(ns, len(ns))


print('#'*444)





con = [  [-1, -1, -1],[1, 1, 1],      [-1, -1, 1],[1, 1, -1],       [-1, 1, 1],[1, -1, -1],         [-1, 1, -1],[1, -1, 1]   ]
#[[0, 0, 0), (5, 5, 5), (5, 5, 0), (0, 0, 5), (5, 0, 0), (0, 5, 5), (5, 0, 5), (0, 5, 0)] 
con = [  [+1, +1, +1],[-1, -1, -1],      [-1, -1, +1],[+1, +1, -1],       [-1, +1, +1],[+1, -1, -1],         [-1, +1, -1],[+1, -1, +1]   ]


corner = []
for conn in con :
	DIR = []
	for aa in a :
		if aa[0] == conn[0] or aa[1] == conn[1] or   aa[2] == conn[2] :
			if aa not in DIR : DIR.append(aa)
	if DIR not in corner : corner.append(DIR)
	
	
print(corner,len(corner),len(corner[0]), len(corner)*len(corner[0]))
	













"""